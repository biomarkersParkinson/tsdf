tsdf.write_tsdf
===============

.. py:module:: tsdf.write_tsdf

.. autoapi-nested-parse::

   Module for writing TSDF files.

   Reference: https://arxiv.org/abs/2211.11294



Functions
---------

.. autoapisummary::

   tsdf.write_tsdf.write_metadata
   tsdf.write_tsdf._extract_common_fields
   tsdf.write_tsdf._calculate_overlaps_rec
   tsdf.write_tsdf._get_all_keys
   tsdf.write_tsdf.calculate_max_overlap
   tsdf.write_tsdf.max_len_key


Module Contents
---------------

.. py:function:: write_metadata(metadatas: List[tsdf.tsdfmetadata.TSDFMetadata], file_name: str) -> None

   Combine and save the TSDF metadata objects as a json file.

   :param metadatas: List of TSDFMetadata objects to be saved.
   :param file_name: Name of the file to be saved. The file will be saved in the directory of the first TSDFMetadata object in the list.

   :raises TSDFMetadataFieldValueError: if the metadata files cannot be combined (e.g. they have no common fields) or if the list of TSDFMetadata objects is empty.


.. py:function:: _extract_common_fields(metadatas: List[Dict[str, Any]]) -> Dict[str, Any]

   Extract the fields that are the same for all the metadata files.
   A new dict is created and the fields are removed from the original dictionaries.

   :param metadatas: List of dictionaries containing the metadata.

   :return: Dictionary containing the common fields.


.. py:function:: _calculate_overlaps_rec(metadatas: List[Dict[str, Any]]) -> List[Dict[str, Any]]

   A recursive call that optimises the structure of the TSDF metadata, by grouping common values. For the input the list of dictionaries
   corresponds to a list of "flat" metadata dictionaries. The output is a list of dictionaries (potentially of length 1) that contain
   the metadata in a tree structure. The tree structure is created by grouping the common values in the metadata.
   The grouping is done recursively, until no more grouping is possible.

   :param metadatas: List of dictionaries containing the metadata.

   :return: List of dictionaries containing the metadata in a tree structure.


.. py:function:: _get_all_keys(metadatas: List[Dict[str, Any]]) -> List[str]

   Get all the keys from the metadata files.

   :param metadatas: List of dictionaries containing the metadata.

   :return: List of keys.


.. py:function:: calculate_max_overlap(meta_files: List[Dict[str, Any]], meta_key: str) -> List[Dict[str, Any]]

   Calculate the maximum overlap between the metadata files, for a specific key.
   It returns the biggest group of dictionaries that contain the same value for the given meta_key.

   :param meta_files: List of dictionaries containing the metadata.
   :param meta_key: The key for which the overlap is calculated.

   :return: List of dictionaries containing the metadata.


.. py:function:: max_len_key(elements: Dict[str, List[Dict[str, Any]]]) -> str

   Return the key in a dictionary that has the longest list as a value.

   :param elements: Dictionary containing the elements.

   :return: The key that has the longest list as a value.


